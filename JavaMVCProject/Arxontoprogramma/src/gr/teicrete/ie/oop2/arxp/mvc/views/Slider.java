package gr.teicrete.ie.oop2.arxp.mvc.views;

import gr.teicrete.ie.oop2.arxp.mvc.SingleSelectionController;
import gr.teicrete.ie.oop2.arxp.mvc.SingleSelectionView;
import java.awt.Color;
import java.util.Hashtable;
import javax.swing.JLabel;
import javax.swing.event.ChangeEvent;

/**
 *
 * @author Likos
 */
public class Slider extends javax.swing.JFrame implements SingleSelectionView,  javax.swing.event.ChangeListener {

    private SingleSelectionController singleSelectionController;

    /**
     * Creates new form ComboBoxView
     */
    public Slider(SingleSelectionController singleSelectionController) {

        this.singleSelectionController = singleSelectionController;
        initComponents();
        for (int i = 0; i < singleSelectionController.getInitialModelValues().length; i++) {
            // jSlider1.addValues(singleSelectionController.getInitialModelValues()[i]);

        }
        
        jSlider1.setValue(25);
        jSlider1.addChangeListener(this);
//        jSlider1.addChangeListener(this);
        Hashtable<Integer, JLabel> labelTable = new Hashtable<Integer, JLabel>();
        JLabel jLabelFreezingLow = new JLabel("Freezing Low (Turn Switch-1 ON");
        jLabelFreezingLow.setForeground(Color.RED);
        labelTable.put(0, jLabelFreezingLow);

        JLabel jLabelLow = new JLabel("Low (Turn Switch-1 OFF)");
        jLabelLow.setForeground(Color.BLUE);
        labelTable.put(25, jLabelLow);

        JLabel jLabelNormal = new JLabel("Normal");
        jLabelNormal.setForeground(Color.GRAY);
        labelTable.put(60, jLabelNormal);

        JLabel jLabelHigh = new JLabel("HIGH (Turn Switch-2 ON)");
        jLabelHigh.setForeground(Color.ORANGE);
        labelTable.put(90, jLabelHigh);
        jSlider1.setLabelTable(labelTable);
        jSlider1.setPaintLabels(true);
        pack();
    }

    

    // Variables declaration - do not modify                     
    // private javax.swing.JComboBox<String> jSlider11;
    // End of variables declaration                   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSlider1 = new javax.swing.JSlider();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSlider1.setOrientation(javax.swing.JSlider.VERTICAL);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(177, 177, 177))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(164, 164, 164)
                .addComponent(jSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(115, 115, 115))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSlider jSlider1;
    // End of variables declaration//GEN-END:variables

    public void stateChanged(ChangeEvent e) {
        int k=0;
        if(jSlider1.getValue()<25){
           k=1; 
        }if(jSlider1.getValue()<60&& jSlider1.getValue()>=25 ){
           k=2; 
        }
        if(jSlider1.getValue()>60){
           k=3; 
        }
        System.out.println(""+k);
        singleSelectionController.setSelectedIndex(this, k);
    }
   

    @Override
    public void selectionChangedAction(int index) {
        int k = 0;
        if(index==1)
        {
            k=0;
        }
        if(index==2)
        {
            k=25;
        }
        if(index==3)
        {
            k=60;
        }
        jSlider1.setValue(k);
    }

}
